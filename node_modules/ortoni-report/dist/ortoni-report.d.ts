import { Reporter, FullConfig, Suite, TestCase, TestResult, FullResult } from '@playwright/test/reporter';

/**
 * Configuration options for OrtoniReport.
 */
interface OrtoniReportConfig {
    /**
     * The name of the project.
     * @example "Ortoni Project"
     */
    projectName?: string;
    /**
     * The name of the author.
     * @example "John Doe"
     */
    authorName?: string;
    /**
     * The type of tests being run.
     * @example "Regression"
     */
    testType?: string;
    /**
     * The preferred theme for the report.
     * Can be either "light" or "dark".
     * @default "System theme"
     * @example "dark"
     */
    preferredTheme?: 'light' | 'dark';
    /**
     * If true, images will be encoded in base64.
     * @default false
     * @example true
     */
    base64Image?: boolean;
    /**
     * The local relative or absolute path to the logo image.
     * @example "./assets/logo.png"
     * @example "/absolute/path/to/logo.png"
     */
    logo?: string;
    /**
    * The filename to the html report.
    * @example "index.html"
    */
    filename?: string;
}

interface Steps {
    snippet: string | undefined;
    title: string;
    location: string;
}
interface TestResultData {
    suiteTags: string[];
    testTags: string[];
    location: string;
    retry: string;
    isRetry: number;
    projectName: any;
    suite: any;
    title: string;
    status: "passed" | "failed" | "timedOut" | "skipped" | "interrupted" | "expected" | "unexpected" | "flaky";
    flaky: string;
    duration: string;
    errors: any[];
    steps: Steps[];
    logs: string;
    screenshotPath?: string | null | undefined;
    filePath: string;
    projects: Set<string>;
    tracePath?: string;
    videoPath?: string;
    base64Image: boolean | undefined;
}

declare class OrtoniReport implements Reporter {
    private projectRoot;
    private results;
    private groupedResults;
    private suiteName;
    private config;
    private projectSet;
    private tagsSet;
    constructor(config?: OrtoniReportConfig);
    onBegin(config: FullConfig, suite: Suite): void;
    onTestBegin(test: TestCase, result: TestResult): void;
    onTestEnd(test: TestCase, result: TestResult): void;
    private attachFiles;
    onEnd(result: FullResult): void;
    private groupResults;
    generateHTML(filteredResults: TestResultData[], totalDuration: string): string;
}

export { OrtoniReportConfig, OrtoniReport as default };
